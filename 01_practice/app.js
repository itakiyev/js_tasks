/**
 * #1
 * В этом задании вы получаете начальный и конечный номер, Вы должны вернуть количество всех чисел, не включая 5.
 * Начальный и конечный номер включительно!
 *
 * Результат может содержать пятерки
 */

// Примеры:
// 1,9 -> 1,2,3,4,6,7,8,9 -> Result 8
// 4,17 -> 4,6,7,8,9,10,11,12,13,14,16,17 -> Result 12

// ________________________________________________________________________________________

/**
 * #2
 * Ваша задача — найти первый элемент массива, который не является последовательным.
 *
 * Например. Если у нас есть массив [1,2,3,4,6,7,8], то 1, затем 2, затем 3, затем 4 — все подряд, а 6 — нет, так что это первое непоследовательное число.
 *
 * Если весь массив последовательный, верните null.
 */

// ________________________________________________________________________________________

/**
 * #3
 * Учитывая массив целых чисел, ваше решение должно найти наименьшее целое число.
 *
 * Пример:
 * [34, 15, 88, 2] => 2
 * [34, -345, -1, 100] => -345
 */

// ________________________________________________________________________________________

/**
 * #4
 * Суммируйте все числа заданного массива (cq. list), кроме самого высокого и самого низкого элемента (по значению, а не по индексу!).
 *
 * Пример:
 * { 6, 2, 1, 8, 10 } => 16
 * { 1, 1, 11, 2, 3 } => 6
 */

// ________________________________________________________________________________________

/**
 * #5
 * Напишите функцию findNeedle(), которая принимает массив, полный мусора, но содержащий одну "needle".
 * После того, как ваша функция найдет "needle", она должна вернуть сообщение (в виде строки), в котором говорится:
 * 
 * found the needle at position {index}
 * 
 */

// findNeedle(['hay', 'junk', 'hay', 'hay', 'moreJunk', 'needle', 'randomJunk']) => "found the needle at position 5"

// ________________________________________________________________________________________

/**
 * #6
 * Вам даны длина и ширина четырехугольника. Многоугольник может быть прямоугольным или квадратным.
 * Если это квадрат, вернуть его площадь. Если это прямоугольник, верните его периметр.
 * 
 * Пример:
 * area_or_perimeter(6, 10) --> 32
 * area_or_perimeter(3, 3) --> 9
 * 
 * Примечание: Это квадрат, если его длина и ширина равны, в противном случае это прямоугольник.
 */

// ________________________________________________________________________________________

/**
 * #7
 * Напишите программу, которая находит сумму всех чисел от 1 до num. Число всегда будет положительным целым числом больше 0.
 * 
 * Пример:
 * summation(2) -> 3 => 1 + 2
 * summation(8) -> 36 => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8
 */

// ________________________________________________________________________________________

/**
 * #8
 * Жас любит кататься на велосипеде.
 * Поскольку Жас знает, как важно избегать обезвоживания, он выпивает 0,5 литра воды за час езды на велосипеде.
 * Вам дается время в часах, и вам нужно вернуть количество литров, которые выпьет Жас, округленное до наименьшего значения.
 * 
 * Пример:
 * time = 3 => litres = 1
 * time = 6.7 => litres = 3
 * time = 11.8 => litres = 5
 */

// ________________________________________________________________________________________

/**
 * #9
 * Создайте функцию, которая принимает 2 строковых аргумента и возвращает целое число, соответствующее количеству вхождений второго аргумента в первом.
 * 
 * Если вхождений не найдено, должно быть возвращено число 0.
 * 
 * Пример:
 * ("Hello", "o")  ==>  1
 * ("Hello", "l")  ==>  2
 * ("", "z")       ==>  0
 */